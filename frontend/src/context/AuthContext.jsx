// src/context/AuthContext.jsx
import { createContext, useEffect, useState, useContext } from "react";
import { onAuthStateChanged } from "firebase/auth";
import { auth } from "../firebase/config";
import { logout as apiLogout } from "../services/authService";
import api from "../utils/api";

const AuthContext = createContext();

const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(true);
  // ‚úÖ Ë™çË®ºÁä∂ÊÖã„ÅÆÊ∫ñÂÇô„Åå„Åß„Åç„Åü„Åã„ÇíÁ§∫„ÅôÊñ∞„Åó„ÅÑÁä∂ÊÖã
  const [isAuthReady, setIsAuthReady] = useState(false);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        try {
          const idTokenResult = await currentUser.getIdTokenResult();
          const claims = idTokenResult.claims;

          setUser(currentUser);
          setToken(await currentUser.getIdToken());
          setIsAdmin(claims?.role === "admin");

          console.log("‚úÖ AuthContext: „É¶„Éº„Ç∂„Éº„Åå„É≠„Ç∞„Ç§„É≥„Åó„Åæ„Åó„Åü", {
            user: currentUser.uid,
            isAdmin: claims?.role === "admin",
            claims: claims,
          });
        } catch (error) {
          console.error(
            "‚ùå AuthContext: ID„Éà„Éº„ÇØ„É≥„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü",
            error
          );
        }
      } else {
        setUser(null);
        setToken(null);
        setIsAdmin(false);

        console.log("‚ùå AuthContext: „É¶„Éº„Ç∂„Éº„ÅØ„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü");
      }
      setLoading(false);
      // ‚úÖ Ë™çË®ºÁä∂ÊÖã„ÅÆÊ∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Åü„Åì„Å®„ÇíË®≠ÂÆö
      setIsAuthReady(true);
    });

    return () => unsubscribe();
  }, []);

  const handleLogout = async () => {
    try {
      await apiLogout();
    } catch (error) {
      console.error("„É≠„Ç∞„Ç¢„Ç¶„Éà„Ç®„É©„Éº:", error);
    }
  };

  // ‚úÖ isAuthReady„Çívalue„Å´ËøΩÂä†
  const value = {
    user,
    token,
    isAdmin,
    loading,
    isAuthReady,
    logout: handleLogout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// üí° ‰øÆÊ≠£: „Åì„Åì„Å´ registerUserInBackend Èñ¢Êï∞„ÇíÁßªÂãï
const registerUserInBackend = async (idToken, userData) => {
  try {
    console.log("üöÄ „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Å∏„ÅÆÁôªÈå≤ÈñãÂßã:", userData);
    const res = await api.post("/users/register", userData, {
      headers: {
        Authorization: `Bearer ${idToken}`,
      },
    });
    console.log("‚úÖ „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Å∏„ÅÆÁôªÈå≤ÊàêÂäü:", res.data);

    // ÁôªÈå≤ÊàêÂäüÂæå„ÄÅFirebase„ÅÆID„Éà„Éº„ÇØ„É≥„ÇíÂÜçÂèñÂæó„Åó„Å¶„Ç´„Çπ„Çø„É†„ÇØ„É¨„Éº„É†„ÇíÂèçÊò†
    const firebaseUser = auth.currentUser;
    if (firebaseUser) {
      await firebaseUser.getIdToken(true); // Âº∑Âà∂ÁöÑ„Å´„Éà„Éº„ÇØ„É≥„ÇíÊõ¥Êñ∞
      console.log("‚úÖ ID„Éà„Éº„ÇØ„É≥„ÅÆÂº∑Âà∂Êõ¥Êñ∞ÊàêÂäü");
    }
  } catch (error) {
    console.error("‚ùå „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâÁôªÈå≤„Ç®„É©„Éº:", error.response || error);
    if (error.response?.status === 404) {
      console.error(
        "‚ö†Ô∏è „Ç®„É©„Éº: 404 Not Found - „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆ„É´„Éº„ÉàË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
      );
    } else {
      console.error("‚ö†Ô∏è „Ç®„É©„ÉºË©≥Á¥∞:", error.response?.data?.message);
    }
    throw error; // „Ç®„É©„Éº„ÇíÂÜç„Çπ„É≠„Éº„Åó„Å¶Register.jsx„Åß„Ç≠„É£„ÉÉ„ÉÅ
  }
};

const useAuth = () => useContext(AuthContext);

export { AuthProvider, useAuth, registerUserInBackend };
